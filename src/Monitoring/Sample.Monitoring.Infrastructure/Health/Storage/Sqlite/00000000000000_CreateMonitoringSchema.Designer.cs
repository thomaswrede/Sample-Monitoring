// <auto-generated />
using System;

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Sample.Monitoring.Infrastructure.Health.Storage.Sqlite
{
  [DbContext(typeof(HealthCheckDbContext))]
  [Migration("00000000000000_CreateMonitoringSchema")]
  partial class CreateMonitoringSchema
  {
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

      modelBuilder.Entity("Sample.Monitoring.Model.Health.HealthCheck", b =>
          {
            b.Property<Guid>("Id")
                      .HasColumnType("TEXT")
                      .HasColumnName("fldId")
                      .HasAnnotation("Relational:JsonPropertyName", "Id");

            b.Property<string>("Description")
                      .HasColumnType("TEXT")
                      .HasColumnName("fldDescription")
                      .HasAnnotation("Relational:JsonPropertyName", "Description");

            b.Property<string>("Name")
                      .IsRequired()
                      .HasColumnType("TEXT")
                      .HasColumnName("fldName")
                      .HasAnnotation("Relational:JsonPropertyName", "Name");

            b.PrimitiveCollection<string>("Tags")
                      .HasColumnType("TEXT")
                      .HasColumnName("fldTags")
                      .HasAnnotation("Relational:JsonPropertyName", "Tags");

            b.HasKey("Id");

            b.ToTable("HealthChecks");

            b.HasAnnotation("Relational:JsonPropertyName", "HealthCheck");
          });

      modelBuilder.Entity("Sample.Monitoring.Model.Health.HealthCheckEntry", b =>
          {
            b.Property<Guid>("Id")
                      .HasColumnType("TEXT")
                      .HasColumnName("fldId")
                      .HasAnnotation("Relational:JsonPropertyName", "Id");

            b.Property<Guid>("ApplicationId")
                      .HasColumnType("TEXT")
                      .HasColumnName("fldApplicationId")
                      .HasAnnotation("Relational:JsonPropertyName", "ApplicationId");

            b.Property<string>("Description")
                      .HasColumnType("TEXT")
                      .HasColumnName("fldDescription")
                      .HasAnnotation("Relational:JsonPropertyName", "Description");

            b.Property<Guid?>("HealthCheckId")
                      .HasColumnType("TEXT")
                      .HasColumnName("fldHealthCheckId");

            b.Property<TimeSpan>("LastDuration")
                      .HasColumnType("TEXT")
                      .HasColumnName("fldLastDuration")
                      .HasAnnotation("Relational:JsonPropertyName", "LastDuration");

            b.Property<DateTime>("LastExecution")
                      .HasColumnType("TEXT")
                      .HasColumnName("fldLastExecution")
                      .HasAnnotation("Relational:JsonPropertyName", "LastExecution");

            b.Property<string>("Name")
                      .IsRequired()
                      .HasColumnType("TEXT")
                      .HasColumnName("fldName")
                      .HasAnnotation("Relational:JsonPropertyName", "Name");

            b.Property<string>("ServerName")
                      .IsRequired()
                      .HasColumnType("TEXT")
                      .HasColumnName("fldServerName")
                      .HasAnnotation("Relational:JsonPropertyName", "ServerName");

            b.Property<int>("Status")
                      .HasColumnType("INTEGER")
                      .HasColumnName("fldStatus")
                      .HasAnnotation("Relational:JsonPropertyName", "HealthStatus");

            b.HasKey("Id");

            b.HasIndex("HealthCheckId");

            b.ToTable("HealthCheckEntries");
          });

      modelBuilder.Entity("Sample.Monitoring.Model.Health.HealthCheckHistoryEntry", b =>
          {
            b.Property<Guid>("Id")
                      .HasColumnType("TEXT")
                      .HasColumnName("fldId")
                      .HasAnnotation("Relational:JsonPropertyName", "Id");

            b.Property<Guid>("EntryId")
                      .HasColumnType("TEXT")
                      .HasColumnName("fldEntryId")
                      .HasAnnotation("Relational:JsonPropertyName", "EntryId");

            b.Property<TimeSpan>("LastDuration")
                      .HasColumnType("TEXT")
                      .HasColumnName("fldLastDuration")
                      .HasAnnotation("Relational:JsonPropertyName", "LastDuration");

            b.Property<DateTime>("LastExecution")
                      .HasColumnType("TEXT")
                      .HasColumnName("fldLastExecution")
                      .HasAnnotation("Relational:JsonPropertyName", "LastExecution");

            b.Property<int>("Status")
                      .HasColumnType("INTEGER")
                      .HasColumnName("fldStatus")
                      .HasAnnotation("Relational:JsonPropertyName", "Status");

            b.Property<DateTime>("StatusFrom")
                      .HasColumnType("TEXT")
                      .HasColumnName("fldStatusFrom")
                      .HasAnnotation("Relational:JsonPropertyName", "StatusFrom");

            b.HasKey("Id");

            b.HasIndex("EntryId");

            b.ToTable("HealthCheckHistoryEntries");

            b.HasAnnotation("Relational:JsonPropertyName", "HistoryEntries");
          });

      modelBuilder.Entity("Sample.Monitoring.Model.Health.HealthCheckEntry", b =>
          {
            b.HasOne("Sample.Monitoring.Model.Health.HealthCheck", "HealthCheck")
                      .WithMany()
                      .HasForeignKey("HealthCheckId");

            b.Navigation("HealthCheck");
          });

      modelBuilder.Entity("Sample.Monitoring.Model.Health.HealthCheckHistoryEntry", b =>
          {
            b.HasOne("Sample.Monitoring.Model.Health.HealthCheckEntry", "HealthCheckEntry")
                      .WithMany("HistoryEntries")
                      .HasForeignKey("EntryId")
                      .IsRequired()
                      .HasConstraintName("FK_HealthCheckHistoryEntry_HealthCheckEntry");

            b.Navigation("HealthCheckEntry");
          });

      modelBuilder.Entity("Sample.Monitoring.Model.Health.HealthCheckEntry", b =>
          {
            b.Navigation("HistoryEntries");
          });
#pragma warning restore 612, 618
    }
  }
}
